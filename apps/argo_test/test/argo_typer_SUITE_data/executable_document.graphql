# See https://github.com/msolomon/argo/issues/7

query IncorrectTypeForFieldsInFragment {
  hero {
  ... on Human {
    name
  }
  }
}

# See https://github.com/msolomon/argo/issues/8

query FieldOmittable($include: Boolean = false, $skip: Boolean = true) {
  root {
  includeAlways: __typename @include(if: true)
  includeNever: __typename @include(if: false)
  includeVariable: __typename @include(if: $include)
  skipAlways: __typename @skip(if: true)
  skipNever: __typename @skip(if: false)
  skipVariable: __typename @skip(if: $skip)
  }
}

query FragmentSpreadOmittable($include: Boolean = false, $skip: Boolean = true) {
  root {
  __typename
  ...RootFragmentUnreachable1 @include(if: false)
  ...RootFragmentUnreachable2 @skip(if: true)
  ...RootFragmentSimple1 @include(if: $include)
  ...RootFragmentSimple2 @skip(if: $skip)
  required {
    ...RootFragmentSimple
  }
  includeFragmentAlways: required {
    ...RootFragmentSimple @include(if: true)
  }
  includeFragmentVariable: required {
    ...RootFragmentSimple @include(if: $include)
  }
  skipFragmentNever: required {
    ...RootFragmentSimple @skip(if: false)
  }
  skipFragmentVariable: required {
    ...RootFragmentSimple @skip(if: $skip)
  }
  }
}

query InlineFragmentOmittable($include: Boolean = false, $skip: Boolean = true) {
  root {
  __typename
  ... @include(if: true) {
    includeInlineAlways: __typename
  }
  ... @include(if: false) {
    unreachable: __typename
  }
  ... @skip(if: false) {
    skipInlineNever: __typename
  }
  ... @skip(if: true) {
    unreachable: __typename
  }
  ... @include(if: $include) {
    includeInlineVariable: __typename
  }
  ... @skip(if: $skip) {
    skipInlineVariable: __typename
  }
  ... on Child {
    typeConditionInlineMatch: __typename
  }
  ... on Object {
    typeConditionInlineNoMatch: __typename
  }
  }
}

fragment RootFragmentSimple on Child {
  includeAlways: __typename @include(if: true)
  includeNever: __typename @include(if: false)
  skipAlways: __typename @skip(if: true)
  skipNever: __typename @skip(if: false)
}

fragment RootFragmentSimple1 on Child {
  ...RootFragmentSimple
}

fragment RootFragmentSimple2 on Child {
  ...RootFragmentSimple
}

fragment RootFragmentUnreachable on Child {
  unreachable: __typename
}

fragment RootFragmentUnreachable1 on Child {
  ...RootFragmentUnreachable
}

fragment RootFragmentUnreachable2 on Child {
  ...RootFragmentUnreachable
}

# See https://github.com/msolomon/argo/pull/19

query FieldSelectionMergingQuery {
  root {
    __typename
    ... on Child {
      required {
        __typename
      }
    }
    ... on Object {
      required {
        __typename
        object: __typename
      }
      properties {
        x
        y
      }
    }
    ... on OtherObject {
      required {
        __typename
        otherObject: __typename
      }
      properties {
        x
        z
      }
    }
  }
}

query FieldSelectionMergingInvalidQuery {
  root {
    __typename
    required {
      optional {
        ... on Object {
          properties {
            x
            z: x
          }
        }
        ... on OtherObject {
          properties {
            x
            z
          }
        }
      }
    }
  }
}

# Test: argo_typer_resolver

query SimpleQueryWithRelayResolver {
  hero {
    strong_id__
  }
}
